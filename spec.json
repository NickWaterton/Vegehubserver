// Vegehub JSON specification V 1.0 (current as of Firmware V3.9 May 2021)
{
    // Send these fields for the request
    "api_key": api_key_str[16],
    "mac": mac_address_str[16],
    "route_key": route_key_str[16],
    // When querying object arrays, create an empty object or array for each item you want filled. 
    // for example "hub":{}, "slots":[] would get the hub object and the slots array.  
    // The server will return the requested objects as the following json objects. 
    // The following request will get all fields: {"api_key": "XXXX","mac": "XXXX","hub":{},"slots":[],"actuators":[],"schedules":[]}
    "updated": updated_timedate_str,  // time of last configuration update to server db.  
    "who_updated": who_updated_int,   // 0: needs updating by hub, 1: hub did last update, 2: web interface did last update.
    "hub": {
        "model": model_str[32], // "VG-HUB1","VG-HUB4","VG-HUB4-RELAY,"VG-SPRINKLER4","VG-SPRINKLER4-LATCH"
        "firmware_version": firmware_version_str,
        "wifi_version": wifi_version_str,
        "utc_offset": utc_offset_int // in seconds. 
        "name": name_str[32], // name of hub
        "sample_period": sample_period_int, // in seconds  (optional)
        "update_period": update_period_int, // in seconds
        "blink_update": blink_update_int, // 0: don't blink, 1: blink
        "report_voltage": report_voltage_int, // 0: don't report, 1: report voltage
        "server_url": server_url_str,
        "static_ip_addr": static_ip_addr,
        "dns": dns,
        "subnet": subnet,
        "gateway": gateway,
        "current_ip_addr": current_ip_addr,	 // the currently assigned IP Address. Only the Hub can set or write this. 
        "power_mode": power_mode_int 	// Hub is connected to- 0: battery power, 1: wall power. 
    },
    "sensors": [ // sensor input channels 
        {
            "slot": slot_int,  // 0 based.
            "mode": mode_int, // 1: sensor, 0: edge
            "warm_up": warm_up_float,	// in seconds.
            "pull_up": pull_up_int,	// 0: no pull up, 1: use pull up.
            "always_power": always_power_int, // 0: power to sensor not always on, 1: always on.
            "update_on_trigger": update_on_trigger_int,  // 0: don't update, 1: update on trigger.
            "edge": edge_int,		// 0: raising, 1: falling, 2: both. 
        },
    ],
    "actuators": [ // relays, valves, pumps, etc.
        {
            "name": name_str[32], 
            "slot": slot_int, // 0 based index of the physical actuator on the board. 
            "type": type_int, 0: undefined, 1: relay, 2: valve, 3: pump. 
            "enabled": enable_int, // 0: disabled, 1: enabled.
            "mode": mode_int, // 0: sensor conditional, 1: web conditional, 2: non-conditional (manual), 3: auto-generated web conditional.
            "url": url_str[256],
            "url_param": url_param_str[256],
            "turn_on": turn_on_int, // 0: OFF, 1: ON
            "time_dependent": time_dependent_int, // 0: not dependent, 1: dependent (optional)
            "start_time": start_time_str, (optional)
            "end_time": end_time_str, (optional)
            "days_of_week": days_of_week_mask_int, // 0: never, 1: sun, 2: mon, 4: tue, etc.  127 every day. (optional)
            "conditions": [
                {
                    "sequence": sequence_int, // operand order. 0 based. 
                    "slot": slot_int,	// sensor channel slot 
                    "operator": operator_int, // 0: greater than, 1: less than, 2: inside, 3: outside, 4: true, 5: false
                    "lower": lower_float,
                    "upper": upper_float,
                    "hysteresis": hysteresis_float,
                    "chain": chain_int  // 0: none, 1: AND, 2: OR
                }
            ]
        },
    ],
    "schedules": [
        {
            "name": name_str[32], 
            "idx": idx_int, // 0 based. index of the schedule 
            "enabled": enabled_bool, // 0: disabled, 1: enabled.
            "mode": mode_int, // 0: calendar, 1: periodic.
            "days_of_week": days_of_week_mask_int, // 0: never, 1: sun, 2: mon, 4: tue, etc.  127 every day. 
            "period": period_int, // time between starts.
            "start_time": start_time_str,
            "actions": [
                {
                    "enabled": enabled_bool, // 0: disabled, 1: enabled.
                    "actuator_slot": actuator_slot_int, // index of the physical actuator on the board. 
                    "duration": duration_int, // on time of actuator in minutes
                }
            ]
        }
    ],
    "web_conditions": [ // length could be less than the number of actuators. 
        {
            "actuator_slot": slot_int, // 0 based indicates the actuator it is tied to. 
            "name": name_str[32], 
            "condition_key": condition_key_str[16], // 0 based. index of the schedule 
        }
    ],
    "schedule_overrides":[
        {
            "id": id_int,						// unique identifier
            "start_time": start_time_str,		// override start time. The zero time of "0000-00-00 00:00:00" means immediate.
            "duration": duration _int,			// (seconds) how long to run actuator
            "actuator_slot": actuator_slot_int, // 0 based index of the actuator. 
            "action_type": action_type_int 		// 1: on, 2: off, 3: cancel. 
        }
    ]
}
